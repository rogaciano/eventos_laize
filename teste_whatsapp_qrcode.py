"""
Script para testar o envio de mensagens WhatsApp usando a API de WhatsApp QR Code.
Esta √© uma alternativa √† API personalizada anterior.

Endpoint: https://app.talkiachat.com.br/external_api/mensagens/whatsapp_qr_code/enviar
M√©todo: GET
Par√¢metros:
- telefone_remetente: N√∫mero do remetente (formato internacional)
- telefone_destinatario: N√∫mero do destinat√°rio (formato internacional)
- conteudo_mensagem: Texto da mensagem
Autentica√ß√£o: Bearer Token
"""

import os
import requests
import django
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv(override=True)

# Configurar Django
os.environ['DJANGO_SETTINGS_MODULE'] = 'eventos.settings'
django.setup()

def format_phone_number(phone_number):
    """
    Formata o n√∫mero de telefone para o formato internacional.
    Remove caracteres n√£o num√©ricos e adiciona o c√≥digo do pa√≠s se necess√°rio.
    
    Args:
        phone_number: N√∫mero de telefone a ser formatado
        
    Returns:
        N√∫mero formatado (formato: 5511999999999)
    """
    # Remover todos os caracteres n√£o num√©ricos
    digits_only = ''.join(filter(str.isdigit, phone_number))
    
    # Se n√£o come√ßar com 55 (Brasil), adicionar
    if not digits_only.startswith('55'):
        digits_only = '55' + digits_only
        
    # Garantir que o n√∫mero tenha pelo menos 10 d√≠gitos (DDD + n√∫mero)
    if len(digits_only) < 12:
        print(f"AVISO: N√∫mero de telefone {phone_number} parece estar incompleto ap√≥s formata√ß√£o: {digits_only}")
        
    print(f"DEBUG - N√∫mero original: {phone_number}")
    print(f"DEBUG - N√∫mero formatado: {digits_only}")
    
    return digits_only

def test_whatsapp_qrcode_api():
    """
    Testa o envio de mensagem usando a API de WhatsApp QR Code.
    """
    # Obter configura√ß√µes da API
    api_url = os.environ.get('WHATSAPP_API_URL')
    api_token = os.environ.get('WHATSAPP_API_TOKEN')
    
    if not api_url or not api_token:
        print("‚ùå Configura√ß√µes da API incompletas!")
        print("Verifique as vari√°veis WHATSAPP_API_URL e WHATSAPP_API_TOKEN no arquivo .env")
        return
    
    # N√∫mero de telefone do remetente (seu n√∫mero)
    sender_number = os.getenv('MANAGER_WHATSAPP', '5581999216560')
    print(f"Usando n√∫mero do remetente: {sender_number}")
    
    # N√∫mero de telefone do destinat√°rio
    default_recipient = os.getenv('TEST_WHATSAPP_NUMBER', '558199216560')
    recipient_number = input(f"Digite o n√∫mero do destinat√°rio (ou pressione Enter para usar {default_recipient}): ").strip()
    if not recipient_number:
        recipient_number = default_recipient
    
    # Formatar n√∫meros
    sender_formatted = format_phone_number(sender_number)
    recipient_formatted = format_phone_number(recipient_number)
    
    # Mensagem de teste
    message = "Ol√°! Esta √© uma mensagem de teste enviada via API de WhatsApp QR Code. üöÄ"
    
    # Preparar par√¢metros da requisi√ß√£o
    params = {
        'telefone_remetente': sender_formatted,
        'telefone_destinatario': recipient_formatted,
        'conteudo_mensagem': message
    }
    
    # Configurar headers com token de autentica√ß√£o
    headers = {
        'Authorization': f'Bearer {api_token}'
    }
    
    print(f"\nüì± Enviando mensagem de {sender_formatted} para {recipient_formatted}...")
    print(f"URL da API: {api_url}")
    print(f"Mensagem: {message}")
    print(f"Headers: {headers}")
    print(f"Par√¢metros: {params}")
    
    try:
        # Enviar requisi√ß√£o para a API
        response = requests.get(api_url, headers=headers, params=params)
        
        # Verificar resposta
        print(f"\nStatus code: {response.status_code}")
        print(f"Resposta: {response.text}")
        
        if response.status_code == 200:
            print("\n‚úÖ Mensagem enviada com sucesso!")
            try:
                response_data = response.json()
                print(f"Detalhes: {response_data}")
            except:
                print("Resposta n√£o √© um JSON v√°lido.")
        else:
            print("\n‚ùå Erro ao enviar mensagem:")
            if response.status_code == 400:
                print("  - Dados insuficientes ou inv√°lidos")
            elif response.status_code == 404:
                print("  - Integra√ß√£o n√£o encontrada")
            elif response.status_code == 500:
                print("  - Erro interno do servidor")
            else:
                print(f"  - Erro desconhecido (c√≥digo {response.status_code})")
            
            try:
                error_data = response.json()
                print(f"Detalhes do erro: {error_data}")
            except:
                print(f"Resposta de erro: {response.text}")
    
    except Exception as e:
        print(f"\n‚ùå Erro ao fazer requisi√ß√£o: {str(e)}")

if __name__ == "__main__":
    print("=== TESTE DE ENVIO DE WHATSAPP COM API QR CODE ===")
    print("Esta solu√ß√£o usa a API de WhatsApp QR Code para envio de mensagens.")
    print("URL da API:", os.environ.get('WHATSAPP_API_URL', 'N√£o configurada'))
    print("\n")
    
    # Executar teste
    test_whatsapp_qrcode_api()
